import os
import uuid
import aiohttp

from aiogram import Bot, F, Router
from aiogram.enums import ContentType
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from fsms.fsm import UserState
from handlers.constants import POST_TYPE_CHOICES, ORIMI_BRANDS, COMPETITOR_BRANDS
from handlers.utils import (
    check_coordinates,
    download_file,
    get_agent_by_phone,
    get_user_profile,
    save_file_to_post,
    save_post_data,
    save_user_profile,
    schedule, get_store_id_by_name,
)
from keyboards.keyboards import (
    get_back_keyboard,
    get_contact_keyboard,
    get_dmp_brands_keyboard,
    get_location_keyboard,
    get_main_keyboard,
    get_photo_keyboard,
    get_photo_type_keyboard,
)
from services.logger import logger

router = Router()


async def check_auth(message: Message, state: FSMContext) -> bool:
    user_id = message.from_user.id
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

    user = await get_user_profile(user_id)
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )
        await state.set_state(UserState.unauthorized)
        return False

    try:
        agent = await get_agent_by_phone(user["agent_number"])
        if not agent:
            logger.warning(f"–ê–≥–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {user['agent_number']} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(
                "‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_contact_keyboard(),
            )
            await state.set_state(UserState.unauthorized)
            return False

        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∞–≥–µ–Ω—Ç: {agent.get('id', 'unknown')}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await state.set_state(UserState.unauthorized)
        return False

    return True


async def reset_to_main(message: Message, state: FSMContext, error_msg: str = None):
    user_id = message.from_user.id
    logger.info(f"–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_msg}")

    if await check_auth(message, state):
        await state.set_state(UserState.authorized)
        await state.update_data(location=None, type_photo=None, shop_name=None,
                                dmp_brand=None, competitor_brand=None)
        msg = error_msg or "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(msg, reply_markup=get_main_keyboard())


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")

    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, "
        "—á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.",
        reply_markup=get_contact_keyboard(),
    )
    await state.set_state(UserState.unauthorized)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ unauthorized")


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    await message.answer(
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üè™ –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç¬ª\n"
        "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "4. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "6. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –≤–æ –≤–Ω–µ—à–Ω–µ–π –∫–∞–º–µ—Ä–µ\n"
        "7. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞\n"
        "8. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not await check_auth(message, state):
        return

    user = await get_user_profile(user_id)
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user['agent_number']}")

    await message.answer(
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['agent_number']}",
        reply_markup=get_main_keyboard(),
    )


@router.message(F.content_type == ContentType.CONTACT)
async def handle_contact(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_state}")

    if current_state != UserState.unauthorized:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω")
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=get_main_keyboard())
        return

    contact = message.contact
    phone_number = contact.phone_number
    logger.info(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {phone_number}")

    if contact.user_id != user_id:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —á—É–∂–æ–π –∫–æ–Ω—Ç–∞–∫—Ç")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return

    try:
        agent = await get_agent_by_phone(phone_number)
        await save_user_profile(user_id, phone_number)
        await state.update_data(phone=phone_number)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –Ω–æ–º–µ—Ä–æ–º {phone_number}")

        if agent:
            await state.set_state(UserState.authorized)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            await message.answer(
                "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
                reply_markup=get_main_keyboard(),
            )
        else:
            logger.warning(f"–ê–≥–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            await message.answer(
                "‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.text == "üè™ –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ç")
async def handle_upload_photo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not await check_auth(message, state):
        return

    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {current_state}")

    if current_state != UserState.authorized:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        await reset_to_main(message, state, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.")
        return

    await state.set_state(UserState.waiting_for_shopName)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞")
    await schedule(message)


@router.message(UserState.waiting_for_shopName, F.text)
async def handle_shop_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    shop_name = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {shop_name}")

    if not await check_auth(message, state):
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞")
        await reset_to_main(message, state)
        return

    try:
        user = await get_user_profile(user_id)
        phone_number = user["agent_number"]
        if not phone_number.startswith("+"):
            phone_number = f"+{phone_number}"

        url = f"{os.getenv('WEB_SERVICE_URL')}/api/agent-schedule/{phone_number}"
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url}")

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    stores = await response.json()
                    store_names = [store["name"] for store in stores] if stores else []
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {store_names}")

                    if message.text not in store_names:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: {shop_name}")
                        await message.answer(
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
                            reply_markup=message.reply_markup
                        )
                        return
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Å—Ç–∞—Ç—É—Å {response.status}")
                    await reset_to_main(message, state, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
                    return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await reset_to_main(message, state, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return

    await state.update_data(shop_name=shop_name)
    await state.set_state(UserState.waiting_for_location)
    logger.info(f"–ú–∞–≥–∞–∑–∏–Ω '{shop_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ–∂–∏–¥–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")

    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ '{shop_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=get_location_keyboard(),
    )


@router.message(UserState.waiting_for_location, F.content_type == ContentType.LOCATION)
async def handle_location(message: Message, state: FSMContext):
    user_id = message.from_user.id
    latitude = message.location.latitude
    longitude = message.location.longitude
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: lat={latitude}, lng={longitude}")

    if not await check_auth(message, state):
        return

    await state.update_data(
        location={
            "latitude": latitude,
            "longitude": longitude,
        }
    )

    data = await state.get_data()
    shop_name = data.get("shop_name")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –º–∞–≥–∞–∑–∏–Ω: {shop_name}")

    try:
        check = await check_coordinates(latitude, longitude, shop_name)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {check}")

        if check:
            await state.set_state(UserState.waiting_for_type_photo)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–æ—Ç–æ")
            await message.answer(
                "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ.",
                reply_markup=get_photo_type_keyboard(),
            )
        else:
            logger.warning(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await reset_to_main(message, state, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await reset_to_main(message, state, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")


@router.message(UserState.waiting_for_location, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_location(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")

    await state.set_state(UserState.waiting_for_shopName)
    await schedule(message)


@router.message(UserState.waiting_for_type_photo, F.text)
async def handle_type_photo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    photo_type = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–∏–ø —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {photo_type}")

    if not await check_auth(message, state):
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–æ—Ç–æ")
        await state.set_state(UserState.waiting_for_location)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.",
            reply_markup=get_location_keyboard(),
        )
        return

    if message.text not in POST_TYPE_CHOICES:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ: {photo_type}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_photo_type_keyboard(),
        )
        return

    type_photo = message.text
    await state.update_data(type_photo=type_photo)
    logger.info(f"–¢–∏–ø —Ñ–æ—Ç–æ '{type_photo}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if "–î–ú–ü" in type_photo:
        if "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç" in type_photo:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –î–ú–ü –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞")
            brands_keyboard = await get_dmp_brands_keyboard("competitor")
            await message.answer(
                f"üìã –¢–∏–ø: {type_photo}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞:",
                reply_markup=brands_keyboard,
            )
            await state.set_state(UserState.waiting_for_competitor_brand)
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –î–ú–ü –û–†–ò–ú–ò")
            brands_keyboard = await get_dmp_brands_keyboard("orimi")
            await message.answer(
                f"üìã –¢–∏–ø: {type_photo}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –û–†–ò–ú–ò:",
                reply_markup=brands_keyboard,
            )
            await state.set_state(UserState.waiting_for_dmp_brand)
    else:
        await state.set_state(UserState.waiting_for_photo)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ")
        await message.answer(
            f"üìã –¢–∏–ø —Ñ–æ—Ç–æ: {type_photo}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
            reply_markup=get_photo_keyboard(),
        )


@router.message(UserState.waiting_for_dmp_brand, F.text)
async def handle_dmp_brand(message: Message, state: FSMContext):
    user_id = message.from_user.id
    brand = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –±—Ä–µ–Ω–¥ –û–†–ò–ú–ò –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {brand}")

    if not await check_auth(message, state):
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ –û–†–ò–ú–ò")
        await state.set_state(UserState.waiting_for_type_photo)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ñ–æ—Ç–æ.",
            reply_markup=get_photo_type_keyboard(),
        )
        return

    if message.text not in ORIMI_BRANDS:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –±—Ä–µ–Ω–¥ –û–†–ò–ú–ò: {brand}")
        brands_keyboard = await get_dmp_brands_keyboard("orimi")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±—Ä–µ–Ω–¥!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –û–†–ò–ú–ò:",
            reply_markup=brands_keyboard,
        )
        return

    dmp_brand = message.text
    await state.update_data(dmp_brand=dmp_brand)
    await state.set_state(UserState.waiting_for_photo)
    logger.info(f"–ë—Ä–µ–Ω–¥ –û–†–ò–ú–ò '{dmp_brand}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    await message.answer(
        f"üìã –í—ã–±—Ä–∞–Ω –±—Ä–µ–Ω–¥ –û–†–ò–ú–ò: {dmp_brand}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
        reply_markup=get_photo_keyboard(),
    )


@router.message(UserState.waiting_for_competitor_brand, F.text)
async def handle_competitor_brand(message: Message, state: FSMContext):
    user_id = message.from_user.id
    brand = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –±—Ä–µ–Ω–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {brand}")

    if not await check_auth(message, state):
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞")
        await state.set_state(UserState.waiting_for_type_photo)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ñ–æ—Ç–æ.",
            reply_markup=get_photo_type_keyboard(),
        )
        return

    if message.text not in COMPETITOR_BRANDS:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –±—Ä–µ–Ω–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {brand}")
        brands_keyboard = await get_dmp_brands_keyboard("competitor")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±—Ä–µ–Ω–¥!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:",
            reply_markup=brands_keyboard,
        )
        return

    competitor_brand = message.text
    await state.update_data(competitor_brand=competitor_brand)
    await state.set_state(UserState.waiting_for_competitor_count_after_brand)
    logger.info(f"–ë—Ä–µ–Ω–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ '{competitor_brand}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    await message.answer(
        f"üìã –í—ã–±—Ä–∞–Ω –±—Ä–µ–Ω–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {competitor_brand}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–ú–ü –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:",
        reply_markup=get_back_keyboard(),
    )


@router.message(UserState.waiting_for_competitor_count_after_brand, F.text)
async def handle_competitor_count_after_brand(message: Message, state: FSMContext):
    user_id = message.from_user.id
    count_text = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {count_text}")

    if not await check_auth(message, state):
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        await state.set_state(UserState.waiting_for_competitor_brand)
        brands_keyboard = await get_dmp_brands_keyboard("competitor")
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞.",
            reply_markup=brands_keyboard,
        )
        return

    cnt = message.text

    if not cnt.isdigit():
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cnt}")
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ:",
            reply_markup=get_back_keyboard(),
        )
        return

    try:
        user_profile = await get_user_profile(user_id)
        agent = await get_agent_by_phone(user_profile["agent_number"])
        state_data = await state.get_data()
        store = await get_store_id_by_name(state_data["shop_name"])

        logger.info(
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –∞–≥–µ–Ω—Ç={agent.get('id')}, –º–∞–≥–∞–∑–∏–Ω={store.get('id') if store else None}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={cnt}")

        if not store:
            logger.error(f"–ú–∞–≥–∞–∑–∏–Ω '{state_data['shop_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await reset_to_main(message, state, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        location = state_data.get("location", {})
        result = await save_post_data(
            agent["id"],
            store["id"],
            location.get("latitude"),
            location.get("longitude"),
            state_data.get("type_photo"),
            state_data.get("competitor_brand"),
            cnt,
        )

        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
        await reset_to_main(message, state, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await reset_to_main(message, state, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


@router.message(UserState.waiting_for_photo, F.content_type == ContentType.DOCUMENT)
async def handle_file(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not await check_auth(message, state):
        return

    try:
        user_profile = await get_user_profile(user_id)
        state_data = await state.get_data()
        location = state_data.get("location")
        type_photo = state_data.get("type_photo")
        shop_name = state_data.get("shop_name")

        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –º–∞–≥–∞–∑–∏–Ω={shop_name}, —Ç–∏–ø={type_photo}")

        if not location:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await state.set_state(UserState.waiting_for_location)
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        agent = await get_agent_by_phone(user_profile["agent_number"])
        store = await get_store_id_by_name(shop_name)

        logger.info(
            f"–ù–∞–π–¥–µ–Ω –∞–≥–µ–Ω—Ç {agent.get('id')} –∏ –º–∞–≥–∞–∑–∏–Ω {store.get('id') if store else None} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if not store:
            logger.error(f"–ú–∞–≥–∞–∑–∏–Ω '{shop_name}' –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await reset_to_main(message, state, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        document = message.document
        file_id = document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_name = (
                document.file_name or f"{uuid.uuid4().hex}{os.path.splitext(file_path)[1]}"
        )

        file_url = f"https://api.telegram.org/file/bot{os.getenv('SECRET_KEY')}/{file_path}"
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {file_name}, —Ä–∞–∑–º–µ—Ä: {document.file_size}")

        status_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")

        try:
            relative_path = await download_file(file_url, file_name)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {relative_path}")

            result = await save_file_to_post(
                agent["id"],
                store["id"],
                relative_path,
                latitude=location["latitude"],
                longitude=location["longitude"],
                type_photo=type_photo,
                dmp_type=state_data.get("dmp_brand")
            )

            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")

            await bot.edit_message_text(
                "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
            )

            await reset_to_main(message, state)
            await message.answer("–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ?", reply_markup=get_main_keyboard())

        except Exception as e:
            error_message = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")


            error_text = "‚ùå –§–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–µ–∂–µ–µ —Ñ–æ—Ç–æ."

            await bot.edit_message_text(
                error_text,
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
            )
            await reset_to_main(message, state)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await reset_to_main(message, state, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")


@router.message(UserState.authorized)
async def handle_authorized_commands(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")

    if not await check_auth(message, state):
        return

    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard(),
    )


@router.message()
async def unknown_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()
    logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}: {message.text}")

    if current_state and current_state != UserState.unauthorized and current_state != UserState.authorized:
        if await check_auth(message, state):
            logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await reset_to_main(message, state, "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return

    if await check_auth(message, state):
        await state.set_state(UserState.authorized)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard(),
        )
    else:
        logger.info(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç")
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )