import os
import uuid

from aiogram import Bot, F, Router
from aiogram.enums import ContentType
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from fsms.fsm import UserState
from handlers.utils import (
    check_coordinates,
    download_file,
    get_agent_by_phone,
    get_user_profile,
    save_file_to_post,
    save_post_data,
    save_user_profile,
    schedule, get_store_id_by_name,
)
from keyboards.keyboards import (
    get_back_keyboard,
    get_contact_keyboard,
    get_dmp_brands_keyboard,
    get_location_keyboard,
    get_main_keyboard,
    get_photo_keyboard,
    get_photo_type_keyboard,
)
from services.logger import logger

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"/start –æ—Ç {message.from_user.id} ({message.from_user.full_name})")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, "
        "—á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.",
        reply_markup=get_contact_keyboard(),
    )
    await state.set_state(UserState.unauthorized)


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    await message.answer(
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "6. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message, state: FSMContext):
    user = await get_user_profile(message.from_user.id)
    if not user:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=get_contact_keyboard(),
        )
        await state.set_state(UserState.unauthorized)
        return
    await message.answer(
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['agent_number']}",
        reply_markup=get_main_keyboard(),
    )


@router.message(F.content_type == ContentType.CONTACT)
async def handle_contact(message: Message, state: FSMContext):
    contact = message.contact
    phone_number = contact.phone_number
    telegram_id = message.from_user.id
    logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç {telegram_id}: {phone_number}")

    if contact.user_id != telegram_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return

    try:
        agent = await get_agent_by_phone(phone_number)

        await save_user_profile(telegram_id, phone_number)
        await state.update_data(phone=phone_number)
        if agent:
            await state.set_state(UserState.authorized)
            await message.answer(
                "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
                reply_markup=get_main_keyboard(),
            )
        else:
            await state.set_state(UserState.unauthorized)
            await message.answer(
                "‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."
            )
    except Exception as e:
        logger.error(f"Error in handle_contact: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.text == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
async def handle_upload_photo(message: Message, state: FSMContext):
    user = await get_user_profile(message.from_user.id)
    if not user:
        await message.answer(
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )
        await state.set_state(UserState.unauthorized)
        return

    await state.set_state(UserState.waiting_for_shopName)
    await schedule(message)


@router.message(UserState.waiting_for_shopName)
async def handle_shop_name(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(UserState.authorized)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard(),
        )
        return

    shop_name = message.text

    await state.update_data(shop_name=shop_name)
    await state.set_state(UserState.waiting_for_location)

    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ '{shop_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=get_location_keyboard(),
    )


@router.message(UserState.waiting_for_location, F.content_type == ContentType.LOCATION)
async def handle_location(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    user = await get_user_profile(telegram_id)

    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )
        await state.set_state(UserState.unauthorized)
        return

    await state.update_data(
        location={
            "latitude": message.location.latitude,
            "longitude": message.location.longitude,
        }
    )
    data = await state.get_data()
    shop_name = data.get("shop_name")
    check = await check_coordinates(
        message.location.latitude, message.location.longitude, shop_name
    )
    if check:
        await state.set_state(UserState.waiting_for_type_photo)

        await message.answer(
            "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ.",
            reply_markup=get_photo_type_keyboard(),
        )
    else:
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard(),
        )


@router.message(UserState.waiting_for_location, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_location(message: Message, state: FSMContext):
    await state.set_state(UserState.authorized)
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(),
    )


@router.message(UserState.waiting_for_type_photo, F.text)
async def handle_type_photo(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(UserState.waiting_for_location)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.",
            reply_markup=get_location_keyboard(),
        )
        return

    type_photo = message.text
    await state.update_data(type_photo=type_photo)

    if "–î–ú–ü" in type_photo:
        if "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç" in type_photo:
            brands_keyboard = await get_dmp_brands_keyboard("competitor")
            await message.answer(
                f"üìã –¢–∏–ø: {type_photo}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞:",
                reply_markup=brands_keyboard,
            )
            await state.set_state(UserState.waiting_for_competitor_brand)
        else:
            brands_keyboard = await get_dmp_brands_keyboard("orimi")
            await message.answer(
                f"üìã –¢–∏–ø: {type_photo}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –û–†–ò–ú–ò:",
                reply_markup=brands_keyboard,
            )
            await state.set_state(UserState.waiting_for_dmp_brand)
    else:
        await state.set_state(UserState.waiting_for_photo)
        await message.answer(
            f"üìã –¢–∏–ø —Ñ–æ—Ç–æ: {type_photo}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞.",
            reply_markup=get_photo_keyboard(),
        )


@router.message(UserState.waiting_for_dmp_brand, F.text)
async def handle_dmp_brand(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(UserState.waiting_for_type_photo)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ñ–æ—Ç–æ.",
            reply_markup=get_photo_type_keyboard(),
        )
        return

    dmp_brand = message.text
    await state.update_data(dmp_brand=dmp_brand)

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –û–†–ò–ú–ò –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–π–ª–∞
    await state.set_state(UserState.waiting_for_photo)
    await message.answer(
        f"üìã –í—ã–±—Ä–∞–Ω –±—Ä–µ–Ω–¥ –û–†–ò–ú–ò: {dmp_brand}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞.",
        reply_markup=get_photo_keyboard(),
    )


@router.message(UserState.waiting_for_competitor_brand, F.text)
async def handle_competitor_brand(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(UserState.waiting_for_type_photo)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ñ–æ—Ç–æ.",
            reply_markup=get_photo_type_keyboard(),
        )
        return

    competitor_brand = message.text
    await state.update_data(competitor_brand=competitor_brand)

    # –î–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    await state.set_state(UserState.waiting_for_competitor_count_after_brand)
    await message.answer(
        f"üìã –í—ã–±—Ä–∞–Ω –±—Ä–µ–Ω–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {competitor_brand}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:",
        reply_markup=get_back_keyboard(),
    )


@router.message(UserState.waiting_for_competitor_count_after_brand, F.text)
async def handle_competitor_count_after_brand(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç user_id={telegram_id}")
    cnt = message.text
    user_profile = await get_user_profile(telegram_id)
    if not user_profile:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        await state.set_state(UserState.unauthorized)
        return
    agent = await get_agent_by_phone(user_profile["agent_number"])
    if not agent:
        logger.warning(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: phone={user_profile['agent_number']}")
        await message.answer("–í–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return
    state_data = await state.get_data()
    store = await get_store_id_by_name(state_data["shop_name"])
    if not store:
        logger.warning(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: phone={user_profile['agent_number']}")
        await message.answer("–í–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return
    if cnt.isdigit():
        await state.set_state(UserState.authorized)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, –∞ –Ω–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        location = data.get("location", {})
        await save_post_data(
            agent["id"],
            store["id"],
            location.get("latitude"),
            location.get("longitude"),
            data.get("type_photo"),
            data.get("competitor_brand"),  # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            cnt,
        )
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ:",
            reply_markup=get_back_keyboard(),
        )


@router.message(UserState.waiting_for_photo, F.content_type == ContentType.DOCUMENT)
async def handle_file(message: Message, bot: Bot, state: FSMContext):
    telegram_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç user_id={telegram_id}")

    try:
        user_profile = await get_user_profile(telegram_id)
        if not user_profile:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
            await message.answer("–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
            await state.set_state(UserState.unauthorized)
            return

        state_data = await state.get_data()
        location = state_data.get("location")
        type_photo = state_data.get("type_photo")

        if not location:
            logger.info(f"–ù–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è user_id={telegram_id}")
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            await state.set_state(UserState.waiting_for_location)
            return

        agent = await get_agent_by_phone(user_profile["agent_number"])
        if not agent:
            logger.warning(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: phone={user_profile['agent_number']}")
            await message.answer("–í–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return
        store = await get_store_id_by_name(state_data["shop_name"])
        if not store:
            logger.warning(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: phone={user_profile['agent_number']}")
            await message.answer("–í–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        document = message.document
        file_id = document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_name = (
                document.file_name or f"{uuid.uuid4().hex}{os.path.splitext(file_path)[1]}"
        )

        logger.info(
            f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç {telegram_id}: file_id={file_id}, path={file_path}, name={file_name}"
        )

        file_url = (
            f"https://api.telegram.org/file/bot{os.getenv('SECRET_KEY')}/{file_path}"
        )
        status_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")

        try:
            relative_path = await download_file(file_url, file_name)

            await save_file_to_post(
                agent["id"],
                store["id"],
                relative_path,
                latitude=location["latitude"],
                longitude=location["longitude"],
                type_photo=type_photo,
                dmp_type=state_data.get("dmp_brand")
            )

            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_name}")

            await state.update_data(location=None, type_photo=None)
            await state.set_state(UserState.authorized)

            await bot.edit_message_text(
                "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
            )

            await message.answer(
                text="–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ?", reply_markup=get_main_keyboard()
            )

        except Exception as e:
            await state.set_state(UserState.authorized)
            error_message = str(e)
            logger.exception(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç {telegram_id}: {error_message}"
            )

            if "–±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥" in error_message:
                await bot.edit_message_text(
                    "‚ùå –§–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–µ–∂–µ–µ —Ñ–æ—Ç–æ.",
                    chat_id=status_message.chat.id,
                    message_id=status_message.message_id,
                )
            elif (
                    "EXIF –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" in error_message
                    or "–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" in error_message.lower()
            ):
                await bot.edit_message_text(
                    "‚ùå –§–æ—Ç–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (EXIF). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    chat_id=status_message.chat.id,
                    message_id=status_message.message_id,
                )
            else:
                await bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.",
                    chat_id=status_message.chat.id,
                    message_id=status_message.message_id,
                )

    except Exception as e:
        await state.set_state(UserState.authorized)
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ handle_file –æ—Ç {telegram_id}: {str(e)}")
        await message.answer("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")


@router.message(UserState.authorized)
async def handle_authorized_commands(message: Message):
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard(),
    )


@router.message()
async def unknown_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    user = await get_user_profile(message.from_user.id)

    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )
        await state.set_state(UserState.unauthorized)
    else:
        if current_state is None:
            await state.set_state(UserState.authorized)

        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard(),
        )
